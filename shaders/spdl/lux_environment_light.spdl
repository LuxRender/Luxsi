#######################################################################
# This file is part of LuXSI;
# LuXSI is a LuxRender Exporter for Autodesk(C) Softimage(C) ( ex-XSI )
# (http://www.luxrender.org)
#
# Copyright(C) 2007 - 2013  of all Authors:
# Michael Gangolf, 'miga', mailto:miga@migaweb.de
# Pedro Alcaide, 'povmaniaco', mailto:p.alcaide@hotmail.com
#
# LuXSI is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License,
# or (at your option) any later version.
#
# LuXSI is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty 
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with LuXSI.  If not, see <http://www.gnu.org/licenses/>.
#
#######################################################################
# SPDL Generated by Softimage Shader Wizard
SPDL
Version = "2.0.0.0";
Reference = "{33EEB5FA-1E07-4D24-B542-F519B3BCA524}";
PropertySet "lux_environment_light_pset"
{
	Parameter "out" output
	{
		GUID = "{A7BA2F77-3D81-4904-B152-FC15C4DDC084}";
		Type = color;
	}
	Parameter "gain" input
	{
		GUID = "{17029773-1D81-4459-B478-BEB5A1FA5830}";
		Type = scalar;
		Value = 1.0;
		Value Minimum = 0.1;
		Value Maximum = 100.0;
	}
	Parameter "importance" input
	{
		GUID = "{A2C7D3AB-8157-4E42-AF37-AE3AE3D45C5E}";
		Type = scalar;
		Value = 1.0;
		Value Minimum = 0.1;
		Value Maximum = 100.0;
	}
	Parameter "HDRI_map" input
	{
		GUID = "{401E35E3-B899-4261-AA11-E67C6F59D86F}";
		Type = texture;
		Texturable = on;
	}
	Parameter "maptype" input # combo
	{
		GUID = "{1A0F87D1-1B32-4301-BEF8-CEE0D543DBA8}";
		Type = integer;
		Value = 1;
		Value Minimum = 0;
		Value Maximum = 3;
	}
	Parameter "shadowraysamples" input
	{
		GUID = "{B7AB6231-34BA-4F2B-8FB8-B98D8F09ABE1}";
		Type = integer;
		Value = 4;
		Value Minimum = 1;
		Value Maximum = 100;
	}
	Parameter "gamma" input
	{
		GUID = "{562D5628-DC83-4C29-A1BE-D46FDF43C393}";
		Type = scalar;
		Value = 1.8;
		Value Minimum = 0.0;
		Value Maximum = 6.0;
	}
	Parameter "color" input
    {
        GUID = "{7EB6B839-6D13-45E8-8D20-370E64461694}";
        Type = color;
        Texturable = on;
        Value = 0.9 0.9 0.9 0.0;
    }
	Parameter "multiply" input
    {
        GUID = "{28D5967D-E146-4A2D-ACCB-556CCB1F90E4}";
        Type = boolean;
        Value = off;
    }
}

MetaShader "lux_environment_light_meta"
{
	Name = "LuxRender Environment Light";
	Type = light, light photon;
	Renderer "mental ray"
	{
		Name = "lux_environment_light";
		FileName = "lux_environment_light";
		Options
		{
			"version" = 1;
		}
	}
}

Defaults
{
	gain
	{
		Name="Gain";
	}
	importance
	{
		Name="Importance";
	}
	HDRI_map
	{
		Name = "HDRI map";
		Description = "Used Hdri map for Image Based Lighting.";
		Commands = "{F5C75F11-2F05-11d3-AA95-00AA0068D2C0}";
		UIType = "ImageBrowserItem.ImageBrowserItem.1";
	}
	maptype
	{
		Name = "Map Type";
		UIType = "combo";
        Items
            {
                "Vertical cross(Skybox)" 	= 0,
                "Angular (Light Probe)"		= 1,
                "Equirectangular(LatLong)" 	= 2
            }
	}
	shadowraysamples
	{
		Name = "Shadow Ray Samples";
	}	
	gamma
	{
		Name = "Gamma";
	}
	color
    {
        Name = "Color";
        UIType = "rgb";
        #Commands = "{F5C75F11-2F05-11D3-AA95-00AA0068D2C0}";
    }
	multiply
	{
		Name="Multiply by color";
	}
}

Layout "Default"
{
	HDRI_map, nolabel;
	maptype, LabelWidth(60%,95);
	shadowraysamples, 	LabelWidth(60%,95);
	gamma, 	LabelWidth(60%,95);
	
	Group, ShowFrame
	{
		gain;
		importance;
	}	
	Group, ShowFrame
    {
		multiply;
		color;
	}
}

Logic
{
	Sub multiply_Onchanged()
		pset.color.Enable(multiply = TRUE)
	End Sub
	'Application.LogMessage( soft_shadows.Value )
	Sub OnInit
        multiply_Onchanged
	End Sub
}

Plugin = Shader
{
	FileName = "lux_metal"; # test
}
